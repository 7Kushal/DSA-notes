https://leetcode.com/problems/permutations/description/

class Solution {
    public List<List<Integer>> permute(int[] nums) {
        List<List<Integer>> ans = new ArrayList<>();
        int n =nums.length;
        recurse(ans,new ArrayList<>(),0,n,nums);
        return ans;
    }
    public void recurse(List<List<Integer>> ans, ArrayList<Integer> temp, int index, int n,int[] nums){

        if(index==n){   
            ans.add(new ArrayList<>(temp));
            return;
        }
        
        for(int i = index;i<n;i++){
            
            swap(nums,i,index);
            temp.add(nums[index]);
            recurse(ans,temp,index+1,n,nums);
            temp.remove(temp.size()-1);
            swap(nums,i,index);
            
        }
    }
    public void swap(int[] nums, int a , int b){
        int x = nums[a];
        nums[a]=nums[b];
        nums[b]=x;
    }
}