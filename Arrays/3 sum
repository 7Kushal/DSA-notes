class Solution {
    public List<List<Integer>> threeSum(int[] nums) {
        //best time complexity we can get is O(N2)
        List<List<Integer>> ans = new ArrayList<>();
        // Set<List<Integer>> set = new HashSet<>();

        Arrays.sort(nums);

        for(int i=0;i<nums.length-2;i++){
            if(nums[i]>0 || (i!=0 && nums[i]==nums[i-1]))continue;
            int l=i+1;
            int r=nums.length-1;
            while(l<r){
                // int curr = nums[l]+nums[r]+nums[i];
                if(nums[i]+nums[l]+nums[r]>0){
                    r--;
                    continue;
                }
                if(nums[i]+nums[l]+nums[r]<0){
                    l++;
                    continue;
                }
                ans.add(Arrays.asList(nums[i],nums[l],nums[r]));
                l++;r--;

                while(l<r && nums[r]==nums[r+1])
                r--;
            }
        }
        return ans;
    }
}

Tc - O(N*N)
SC - O(~1)